class BSTNode{
    
    constructor(data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

class BinarySearchTree {
    constructor() {
        this.root = null
    }

    isEmpty() {
        if (this.root === null) {
            return this
        }
    }

    min() {
       var runner = this.root
        if (runner === null) {
            return this
        }
        while (runner.left !== null) {
            runner = runner.left
        }
        return runner.data
    }
    minRecurisve(current = this.root) {
        if (current === null)
            return null
        if (current.left === null) {
            return current.data
        }
        return this.minRecurisve(current = current.left)
    }

    max() {
       var runner = this.root
        if (runner === null) {
            return null
        }
        while (runner.right !== null) {
            runner = runner.right
        }
        return runner.data
    }

    maxRecursive(current = this.root) {
        if (current === null) {
            return null
        }
        if (current.right === null) {
            return current.data
        }
        return this.maxRecursive(current = current.right)
    }
}


const EmptyTree = new BinarySearchTree();
const oneNodeTree = new BinarySearchTree();
oneNodeTree.root = new BSTNode(10);



const twoLevelTree = new BinarySearchTree();
twoLevelTree.root = new BSTNode(10);
twoLevelTree.root.left = new BSTNode(5);
twoLevelTree.root.right = new BSTNode(15);

const threeLevelTree = new BinarySearchTree();
threeLevelTree.root = new BSTNode(10);
threeLevelTree.root.left = new BSTNode(5);
threeLevelTree.root.left.left = new BSTNode(2);
threeLevelTree.root.left.right = new BSTNode(6);
threeLevelTree.root.right = new BSTNode(15);
threeLevelTree.root.right.left = new BSTNode(13);

console.log("test")
console.log(twoLevelTree.min(twoLevelTree.root))
console.log(threeLevelTree.min(threeLevelTree.root))
console.log(twoLevelTree.max(twoLevelTree.root))
console.log(twoLevelTree.max(threeLevelTree.root))

console.log(twoLevelTree.minRecurisve(twoLevelTree.root))
console.log(threeLevelTree.minRecurisve(threeLevelTree.root))
console.log(twoLevelTree.maxRecursive(twoLevelTree.root))
console.log(threeLevelTree.maxRecursive(threeLevelTree.root))
