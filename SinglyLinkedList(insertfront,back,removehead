
class ListNode{
    constructor(data) {
        this.data = data;
        this.next = null;
    }
}
class SinglyLinkedList {
    constructor() {
        this.head = null;
    }

    insertAtBack(data) {
        var newNode = new ListNode(data);

        if (this.head === null) {
            this.head = newNode
            return this
        }
        var runner = this.head
        while (runner.next !== null) {
            runner = runner.next
        }

        runner.next = newNode;
        return this;
    }

    toArr() {
        var arr = [];
        var runner = this.head;
        while (runner !== null) {
            arr.push(runner.data);
            runner = runner.next;
        }
        return arr;
    }

    insertAtFront(data) {
        var newNode = new ListNode(data)
        if (this.head === null) {
            this.head = newNode
            return this
        } else {
            newNode.next = this.head
            this.head = newNode
            return this
        }

    }
    removeHead() {
        if (this.head === null) {
            return this
        } else {
            let temp = this.head
            this.head = this.head.next
            temp.next = null
            return this
        }
    }

    average() {
        var sum = 0
        var count = 0
        var runner = this.head
        while (runner !== null) {
            sum+= runner.data
            count++
            runner=runner.next
        }
        const average= sum / count

        const originalList = new SinglyLinkedList().insertAtBack(this.toArr())
        
        this.head = new ListNode(average)
        
        return originalList
    }
}

const emptyList = new SinglyLinkedList()

const singleNodeList = new SinglyLinkedList().insertAtBack([1]).insertAtFront([10])

const biNodeList = new SinglyLinkedList().insertAtBack([1, 2]).removeHead();  

const firstThreeList = new SinglyLinkedList().insertAtBack([1, 2, 3]).average()

const secondThreeList = new SinglyLinkedList().insertAtBack([4,5,6]) 

const unorderedList = new SinglyLinkedList().insertAtBack([-5, -10, 4, -3, 6, 1, -7, -2])


