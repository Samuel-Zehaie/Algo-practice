    concat(addList) {
        var runner = this.head
        var addList = new SinglyLinkedList()
        if (this.head === null) {
            this.head= addList.head
        }

        while (runner.next !== null) {
            runner=runner.next
        }
        this.runner.next = addList.head
        return this
    }




    moveMinToFront() {
    var runner = this.head
        var min = this.head
        var previous = null
        let tempPrevious = null
        let tempRunner=null
        while (runner !== null) {
            if (runner.data < min.data) {
                min=runner.data
                tempRunner = runner
                tempPrevious=previous
                
            }
            previous = runner
            runner=runner.next
        }
        if (!tempPrevious) {
            return this
        }
        tempPrevious.next = tempRunner.next
        tempRunner.next = this.head
        this.head = tempRunner
        return this
    }


    insertAtBackRecursive(data, runner = this.head) {
        if (this.head === null) {
            this.head = new ListNode(data)
            return this

        }
        if (runner.next === null) {
            runner.next = new ListNode(data);
            return this
        }
        return this.insertAtBackRecursive(data, runner.next);
    }
