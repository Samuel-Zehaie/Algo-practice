    contain(searchVal) {
        var current = this.root
        if (current === null) {
            return false;
        }
        while (current !== null) {
            if (searchVal === current.data) {
                return true;
            }
            if (searchVal < current.data) {
                current = current.left
            }
            else {
                current = current.right
            }
        }
        return false;
    }

    containRecursive(searchVal, Current = this.root) {
        if (Current === null) {
            return false
        }
        if (searchVal === Current.data) {
            return true
        }
        if (searchVal < Current.data) {
            return this.containRecursive(searchVal, Current = Current.left)
        }
        if (searchVal > Current.data) {
            return this.containRecursive(searchVal, Current = Current.right)
        }
    }

    range(startNode = this.root) {
        if (startNode === null) {
            return null;
        }
        var startNode = this.root
        var min = startNode.data
        var max = startNode.data
        var range=null
        while (startNode !== null) {
            min = startNode.data;
            startNode=startNode.left
        }
        startNode=this.root
        while (startNode !== null) {
            max = startNode.data
            startNode=startNode.right
        }
        return range=max-min
    }
}


const EmptyTree = new BinarySearchTree();
const oneNodeTree = new BinarySearchTree();
oneNodeTree.root = new BSTNode(10);



const twoLevelTree = new BinarySearchTree();
twoLevelTree.root = new BSTNode(10);
twoLevelTree.root.left = new BSTNode(5);
twoLevelTree.root.right = new BSTNode(15);

const threeLevelTree = new BinarySearchTree();
threeLevelTree.root = new BSTNode(10);
threeLevelTree.root.left = new BSTNode(5);
threeLevelTree.root.left.left = new BSTNode(2);
threeLevelTree.root.left.right = new BSTNode(6);
threeLevelTree.root.right = new BSTNode(15);
threeLevelTree.root.right.left = new BSTNode(13);

// console.log("test")
// console.log(twoLevelTree.min(twoLevelTree.root))
// console.log(threeLevelTree.min(threeLevelTree.root))
// console.log(twoLevelTree.max(twoLevelTree.root))
// console.log(twoLevelTree.max(threeLevelTree.root))

// console.log(twoLevelTree.minRecurisve(twoLevelTree.root))
// console.log(threeLevelTree.minRecurisve(threeLevelTree.root))
// console.log(twoLevelTree.maxRecursive(twoLevelTree.root))
// console.log(threeLevelTree.maxRecursive(threeLevelTree.root))

console.log(threeLevelTree.range(threeLevelTree.root))
console.log(twoLevelTree.range(twoLevelTree.root))
console.log(threeLevelTree.contain(2))
console.log(threeLevelTree.contain(30))
console.log(threeLevelTree.containRecursive(2))
